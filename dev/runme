#!/bin/bash

# set configuration file or use config.sh
CFG_FILE='cfg/config.sh'
while getopts ":c:" opt; do
    case $opt in
        c)
            CFG_FILE=$OPTARG
            ;;
        *)
            echo "* $OPTARG"
            ;;
    esac
done

shift $((OPTIND - 1))

CMD=$1
ARGV=$@

if [ -f ./$CFG_FILE ]; then
    . ./$CFG_FILE
else
    echo "ERROR: No $CFG_FILE file found!"
    echo "Please create your own config from template file cfg/config.sh.template"
    exit 1
fi

cd $FHIRBASE_HOME;
export FHIRBASE_HOME;

function help_cmd {
    cat <<EOF
Usage: $0 [-c config_file.sh] [command] [args]

Available commands:

-h || help                this help text
test [part_of_test_name]  run tests from dev/test dir. if test name is provided, run specified tests
install dbname            generate and install fhirbase schema into specified DB
build                     build fhirbase.sql file
EOF
}

function install_cmd {
    if [ -z "$1" ]; then
        echo "install command requires dbname argument"
        exit 1
    else
        echo "Installing fhirbase into DB $1..."
        psql $PSQL_ARGS -d $1 < $2
    fi
}

function recreate_db {
    echo "DROP DATABASE $1; CREATE DATABASE $1;" | psql $PSQL_ARGS -d postgres;
}

function drop_db {
    psql $PSQL_ARGS -d template1 -c "DROP DATABASE $1";
}

function test_cmd {
    echo "Running fhirbase tests..."

    glob=''
    pg_prove_args=''

    for word in $ARGV; do
        if [ "$word" != "test" ]; then
            glob="$glob $FHIRBASE_HOME/test/*${word}*"
        fi
    done

    if [ "$glob" = "" ]; then
        glob="$FHIRBASE_HOME/test/*_test.sql";
        pg_prove_args='-v';
    fi

    export TEST_DB_NAME
    recreate_db $TEST_DB_NAME
    cd $FHIRBASE_HOME/test &&
    #$FHIRBASE_HOME/
    pg_prove $PSQL_ARGS $pg_prove_args -d $TEST_DB_NAME $glob

    exit $? # return test subprocess exit code
}

function ttest_cmd {
    echo "Running fhirbase tests..."

    export TEST_DB_NAME
    cd $FHIRBASE_HOME/test
    time psql $PSQL_ARGS -d $TEST_DB_NAME < 05_functions_test.sql

    exit $? # return test subprocess exit code
}

function build_cmd {
    echo "Building fhirbase.sql"

    BUILD_DB_NAME='fhir_build'
    recreate_db $BUILD_DB_NAME
    install_cmd $BUILD_DB_NAME install.sql

    pg_dump $PSQL_ARGS \
            --format=plain \
            --no-owner \
            --file=$FHIRBASE_HOME/../fhirbase.sql \
            $BUILD_DB_NAME && echo "FhirBase schema successfully dumped to $FHIRBASE_HOME/../fhirbase.sql"

    recreate_db $BUILD_DB_NAME
    cd $FHIRBASE_HOME/.. && time psql $PSQL_ARGS -v ON_ERROR_STOP=1 -1 -q -d $BUILD_DB_NAME < fhirbase.sql
    cd $FHIRBASE_HOME/.. && time psql $PSQL_ARGS -v ON_ERROR_STOP=1 -1 -q -d $BUILD_DB_NAME < fhirbase_test.sql
    # cd $FHIRBASE_HOME/bench && time psql $PSQL_ARGS -v ON_ERROR_STOP=1 -1 -q -d $BUILD_DB_NAME < bench.sql
    cd $FHIRBASE_HOME

    exit $? # return tests exit status
}

case "$CMD" in
    "test" )
        test_cmd
        ;;
    "install" )
        install_cmd $2 install.sql
        ;;
    "build" )
        build_cmd
        ;;
    *)
        help_cmd
        exit
esac

exit 0
