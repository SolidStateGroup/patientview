// Generated by CoffeeScript 1.5.0
(function() {
  var debug, eq, fact, self;

  eq = function(x, y) {
    return assert(JSON.stringify(x) === JSON.stringify(y), "Not equal " + JSON.stringify(x) + " != " + JSON.stringify(y));
  };

  fact = function(name, cb) {
    try {
      cb.call(self);
      return process.stdout.write(".");
    } catch (e) {
      console.log(name);
      console.log(e);
      return console.error(e.stack);
    }
  };

  debug = function(mess) {
    return console.log(JSON.stringify(mess));
  };

  self = this;

  self.sql.log = debug;

  fact("underscore", function() {
    eq(this.str.underscore("MaxBodnarchuk"), "max_bodnarchuk");
    eq(this.str.underscore("Max-Bodnarchuk"), "max_bodnarchuk");
    return eq(this.str.underscore("maxBodnarChuk"), "max_bodnar_chuk");
  });

  fact("camelize", function() {
    eq(this.str.camelize("max_bodnarchuk"), "maxBodnarchuk");
    eq(this.str.camelize("max_bodnarchuk"), "maxBodnarchuk");
    return eq(this.str.camelize("max_bodnar_chuk"), "maxBodnarChuk");
  });

  fact("isObject", function() {
    assert(this.u.isObject({}));
    assert(!this.u.isObject([]));
    assert(!this.u.isObject(1));
    assert(!this.u.isObject("vasiliy"));
    assert(!this.u.isObject(new Date()));
    assert(!this.u.isObject(false));
    return assert(!this.u.isObject(true));
  });

  fact("pluralize", function() {
    eq(this.str.pluralize('patient'), 'patients');
    eq(this.str.pluralize('visit'), 'visits');
    eq(this.str.pluralize('boy'), 'boys');
    return eq(this.str.pluralize('party'), 'parties');
  });

  fact('collect_attributes', function() {
    var attrs, old_columns;
    old_columns = this.sql.columns;
    this.sql.columns = function(x) {
      switch (x) {
        case 'patients':
          return [
            {
              column_name: 'id'
            }, {
              column_name: 'birth_date'
            }, {
              column_name: 'resource_type'
            }
          ];
        default:
          return [
            {
              column_name: 'patient_id'
            }
          ];
      }
    };
    attrs = this.sql.collect_attributes('patients', self.pt);
    return eq(attrs.birth_date, '1944-11-17');
  });

  fact('insert_resource', function() {
    var counter;
    this.sql.insert_record = function(table_name, attrs) {
      return console.log("insert into " + table_name + " " + (JSON.stringify(attrs)));
    };
    counter = 0;
    this.sql.uuid = function() {
      return counter += 1;
    };
    return this.sql.insert_resource(self.pt);
  });

}).call(this);
