// Generated by CoffeeScript 1.5.0
(function() {
  var debug, eq, fact, self;

  eq = function(x, y) {
    return assert(JSON.stringify(x) === JSON.stringify(y), "Not equal " + JSON.stringify(x) + " != " + JSON.stringify(y));
  };

  fact = function(name, cb) {
    try {
      cb.call(self);
      return process.stdout.write(".");
    } catch (e) {
      console.log(name);
      console.log(e);
      return console.error(e.stack);
    }
  };

  debug = function(obj) {
    return console.log(JSON.stringify(obj));
  };

  self = this;

  fact("underscore", function() {
    eq(this.str.underscore("MaxBodnarchuk"), "max_bodnarchuk");
    eq(this.str.underscore("Max-Bodnarchuk"), "max_bodnarchuk");
    return eq(this.str.underscore("maxBodnarChuk"), "max_bodnar_chuk");
  });

  fact("camelize", function() {
    eq(this.str.camelize("max_bodnarchuk"), "maxBodnarchuk");
    eq(this.str.camelize("max_bodnarchuk"), "maxBodnarchuk");
    return eq(this.str.camelize("max_bodnar_chuk"), "maxBodnarChuk");
  });

  fact("isObject", function() {
    assert(this.u.isObject({}));
    assert(!this.u.isObject([]));
    assert(!this.u.isObject(1));
    assert(!this.u.isObject("vasiliy"));
    assert(!this.u.isObject(new Date()));
    assert(!this.u.isObject(false));
    return assert(!this.u.isObject(true));
  });

  fact("normalize_keys", function() {
    var nobj, obj;
    obj = {
      NikolayRyzhikov: {
        MikhailRyzhikov: 1,
        VasiliyPupkin: [
          {
            NoYes: 2
          }
        ]
      }
    };
    nobj = this.sql.normalize_keys(obj);
    eq(nobj.nikolay_ryzhikov.vasiliy_pupkin[0].no_yes, 2);
    return eq(nobj.nikolay_ryzhikov.mikhail_ryzhikov, 1);
  });

  fact("pluralize", function() {
    eq(this.str.pluralize('patient'), 'patients');
    eq(this.str.pluralize('visit'), 'visits');
    eq(this.str.pluralize('boy'), 'boys');
    return eq(this.str.pluralize('party'), 'parties');
  });

}).call(this);
