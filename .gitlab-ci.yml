image: alpine

stages:
  - build api
  - package api
  - deploy api
  - deploy importer
  - deploy web

variables:
  PROD_ENV: production
  STAGE_ENV: staging
  # This will supress any download for dependencies and plugins or upload messages which would clutter the console log.
  # `showDateTime` will show the passed time in milliseconds. You need to specify `--batch-mode` to make this work.
  MAVEN_OPTS: "-Dmaven.repo.local=.m2/repository -Dorg.slf4j.simpleLogger.log.org.apache.maven.cli.transfer.Slf4jMavenTransferListener=WARN -Dorg.slf4j.simpleLogger.showDateTime=true -Djava.awt.headless=true"
  # As of Maven 3.3.0 instead of this you may define these options in `.mvn/maven.config` so the same config is used
  # when running from the command line.
  # `installAtEnd` and `deployAtEnd` are only effective with recent version of the corresponding plugins.
  MAVEN_CLI_OPTS: "--batch-mode --errors --fail-at-end --show-version -DinstallAtEnd=true -DdeployAtEnd=true"

  # Cache downloaded dependencies and plugins between builds.
  # To keep cache across branches add 'key: "$CI_JOB_REF_NAME"'
#cache:
#  paths:
#    - .m2/repository


#
#    Staging pipeline
#

# this step should run all the unit tests
build:staging:api:
  stage: build api
  image: maven:3.3.9-jdk-8
  script:
    - echo "Starting PV Staging API Build"
    - mvn $MAVEN_CLI_OPTS clean install -Denv=staging -DskipTests -f root/
  allow_failure: false
  only:
    - develop

package:staging:api:
  stage: package api
  image: maven:3.3.9-jdk-8
  #  if we need artifact from specific job
  #  dependencies:
  #    - staging:pv
#  before_script:
#    - cd root/
#  after_script:
#    - cd ..
  artifacts:
    paths:
      - root/api/target/api.war
      - root/importer/target/importer.war
    expire_in: 3 days
  script:
    - echo "Starting PV Staging API Package"
#    - echo $CI_PIPELINE_ID
    - cp $GOOGLE_PLAY_KEY root/api/src/main/resources/conf/google-play-key.json
    - cp $STAGING_API_PROPS root/api/src/main/resources/conf/staging-api.properties
    - cp $STAGING_DB_PROPS root/api/src/main/resources/conf/staging-database.properties
    - cp $STAGING_API_PROPS root/importer/src/main/resources/conf/staging-api.properties
    - cp $STAGING_DB_PROPS root/importer/src/main/resources/conf/staging-database.properties
    - mvn $MAVEN_CLI_OPTS clean package -Denv=staging -DskipTests -f root/
  allow_failure: false
  when: on_success
  only:
    - develop

deploy:staging:api:
  stage: deploy api
  image: maven:3.3.9-jdk-8
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Starting PV Staging API Deployment"
#    - echo $CI_PIPELINE_ID
    - scp root/api/target/api.war $SSH_USERNAME@$STAGING_PV:$PV_BUILDS/api.war
    - ssh -tt $SSH_USERNAME@$STAGING_PV bash $STAGING_PV_DEPLOY_API $CI_PIPELINE_ID
  when: manual
  only:
    - develop

deploy:staging:importer:
  stage: deploy api
  image: maven:3.3.9-jdk-8
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Starting PV Staging Importer Deployment"
    #- echo $CI_PIPELINE_ID
    - scp root/importer/target/importer.war $SSH_USERNAME@$STAGING_PV:$PV_BUILDS/importer.war
    - ssh -tt $SSH_USERNAME@$STAGING_PV bash $STAGING_PV_DEPLOY_IMPORTER $CI_PIPELINE_ID
  when: manual
  only:
    - develop

build:staging:web:
  stage: deploy web
  image: node:8.0.0
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - export PATH=$PATH:/usr/bin
    - which rsync || ( apt-get update -y && apt-get install rsync -y )
  cache:
    paths:
      - root/webapp/node_modules/
  script:
    - echo "Building WEB"
    - pwd
    - ls -l
    - cd root/webapp
    - npm install -g bower
    - npm install -g grunt
    #    - npm install
    - echo "Build and Package Web"
    - ./deploy_nowar.sh minimalssgdev_nowar
    - echo "Deploying WEB"
    - rsync -ave ssh dist/* $SSH_USERNAME@$STAGING_PV:$PV_WEB
  allow_failure: false
  when: on_success
  only:
    - develop


#
#    Production pipeline
#

# this step should run all the unit tests
build:prod:api:
  stage: build api
  image: maven:3.3.9-jdk-8
  script:
    - echo "Starting PV Production API Build"
    - mvn $MAVEN_CLI_OPTS clean install -Denv=production -DskipTests -f root/
  allow_failure: false
  only:
    - master

package:prod:api:
  stage: package api
  image: maven:3.3.9-jdk-8
  artifacts:
    paths:
      - root/api/target/api.war
      - root/importer/target/importer.war
    expire_in: 3 days
  script:
    - echo "Starting PV Production API Package"
    - cp $GOOGLE_PLAY_KEY root/api/src/main/resources/conf/google-play-key.json
    - cp $PROD_API_PROPS root/api/src/main/resources/conf/production-api.properties
    - cp $PROD_DB_PROPS root/api/src/main/resources/conf/production-database.properties
    - cp $PROD_API_PROPS root/importer/src/main/resources/conf/production-api.properties
    - cp $PROD_DB_PROPS root/importer/src/main/resources/conf/production-database.properties
    - mvn $MAVEN_CLI_OPTS clean install package -Denv=production -DskipTests -f root/
  allow_failure: false
  when: on_success
  only:
    - master

deploy:prod:api:
  stage: deploy api
  image: maven:3.3.9-jdk-8
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Starting PV Production API Deployment"
    - echo $CI_PIPELINE_ID
    - scp root/api/target/api.war $SSH_USERNAME@$PROD_PV:$PV_BUILDS/api.war
    - ssh -tt $SSH_USERNAME@$PROD_PV bash $PROD_PV_DEPLOY_API $CI_PIPELINE_ID
  when: manual
  only:
    - master

deploy:prod:importer:
  stage: deploy api
  image: maven:3.3.9-jdk-8
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - echo "Starting PV Production Importer Deployment"
    - scp root/importer/target/importer.war $SSH_USERNAME@$PROD_PV:$PV_BUILDS/importer.war
    - ssh -tt $SSH_USERNAME@$PROD_PV bash $PROD_PV_DEPLOY_IMPORTER $CI_PIPELINE_ID
  when: manual
  only:
    - master

build:prod:web:
  stage: deploy web
  image: node:8.0.0
  before_script:
    - which ssh-agent
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add - > /dev/null
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
    - export PATH=$PATH:/usr/bin
    - which rsync || ( apt-get update -y && apt-get install rsync -y )
  cache:
    paths:
      - root/webapp/node_modules/
  script:
    - echo "Building Prodcution WEB"
    - pwd
    - ls -l
    - cd root/webapp
    - npm install -g bower
    - npm install -g grunt
    - echo "Build and Package Production Web"
    - ./deploy_nowar.sh minimalssgproduction_nowar
    - echo "DeployingProduction  WEB"
    - rsync -ave ssh dist/* $SSH_USERNAME@$PROD_PV:$PV_WEB
  allow_failure: false
  when: on_success
  only:
    - master